# Workflow to build and test wheels.
# To work on the wheel building infrastructure on a fork, comment out:
#
# if: github.repository == 'scipy/scipy'
#
# in the get_commit_message job include [wheel build] in your commit
# message to trigger the build. All files related to wheel building are located
# at tools/wheels/
# Alternatively, you can add labels to the pull request in order to trigger wheel
# builds.
# The labels that trigger builds are:
# 36 - Build(for changes to the building process,
# 14 - Release(ensure wheels build before release)
name: Wheel builder

on:
  schedule:
  #        ┌───────────── minute (0 - 59)
  #        │  ┌───────────── hour (0 - 23)
  #        │  │ ┌───────────── day of the month (1 - 31)
  #        │  │ │ ┌───────────── month (1 - 12 or JAN-DEC)
  #        │  │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
  #        │  │ │ │ │
  - cron: "42 1 * * 4"
  # push:
  pull_request:
      types: [labeled, opened, synchronize, reopened]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  get_commit_message:
    name: Get commit message
    runs-on: ubuntu-latest
    # TODO re-enable
    # if: github.repository == 'scipy/scipy'
    outputs:
      message: ${{ steps.commit_message.outputs.message }}
    steps:
      - name: Checkout scipy
        uses: actions/checkout@v3
        # Gets the correct commit message for pull request
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Get commit message
        id: commit_message
        run: |
          set -xe
          COMMIT_MSG=$(git log --no-merges -1 --oneline)
          echo "::set-output name=message::$COMMIT_MSG"
          echo github.ref ${{ github.ref }}

  build_wheels:
    name: Build wheel for ${{ matrix.python }}-${{ matrix.buildplat[1] }} ${{ matrix.buildplat[2] }}
    # needs: get_commit_message
    #    if: >-
    #      contains(needs.get_commit_message.outputs.message, '[wheel build]') ||
    #      github.event_name == 'schedule' ||
    #      github.event_name == 'workflow_dispatch' ||
    #      (github.event_name == 'pull_request' &&
    #      (contains(github.event.pull_request.labels.*.name, '36 - Build') ||
    #      contains(github.event.pull_request.labels.*.name, '14 - Release'))) ||
    #      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && ( ! endsWith(github.ref, 'dev0')))
    runs-on: ${{ matrix.buildplat[0] }}
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        # Github Actions doesn't support pairing matrix values together, let's improvise
        # https://github.com/github/feedback/discussions/7835#discussioncomment-1769026
        buildplat:
        - [ubuntu-20.04, manylinux*, x86_64]
        # - [ubuntu-20.04, manylinux*, aarch64]
        # - [macos-11, macosx*, x86_64]
        # - [windows-2019, win*, AMD64]
        # - [windows-2019, win32]
        python: ["cp38", "cp39", "cp310"] #, "cp39", "cp310", "cp38", "cp310", "pp38" "pp39"]
        #    env:
        #      IS_32_BIT: ${{ matrix.buildplat[1] == 'win32' }}
        #      IS_PUSH: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
        #      IS_SCHEDULE_DISPATCH: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout scipy
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      # Used to push the built wheels
      - uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: install-rtools
        run: |
          choco install rtools --no-progress
          echo "c:\rtools40\ucrt64\bin;" >> $env:GITHUB_PATH
        if: runner.os == 'Windows'

      #      - name: Configure mingw for 32-bit builds
      #        run: |
      #          # Force 32-bit mingw
      #          choco uninstall mingw
      #          choco install -y mingw --forcex86 --force --version=7.3.0
      #          echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw32\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      #          refreshenv
      #        if: ${{ env.IS_32_BIT == 'true' }}

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.8.1
        env:
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}
          CIBW_ARCHS: ${{ matrix.buildplat[2] }}
          CIBW_ENVIRONMENT_PASS_LINUX: RUNNER_OS
          CIBW_ENVIRONMENT_WINDOWS: PKG_CONFIG_PATH=c:\\opt\\openblas\\if_32\\64\\lib\\pkgconfig
          # CIBW_ENVIRONMENT_WINDOWS: CMAKE_PREFIX_PATH=c:\\opt\\64
          # CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
          # CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"

      - uses: kittaakos/upload-artifact-as-is@v0
        # upload the wheels with their actual wheel name
        with:
          path: ./wheelhouse/*.whl
